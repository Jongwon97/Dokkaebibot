server.port=8080
server.servlet.context-path=/dokkaebi

logging.level.org.hibernate.SQL=debug
# logging.level.org.hibernate.type=trace

spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

# MySQL 설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# DB Source URL 설정
# 예시) spring.datasource.url=jdbc:mysql://localhost:3306/test_db?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul
spring.datasource.url=jdbc:mysql://localhost:3306/dokkaebi?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true

# DB 사용자 이름 설정
# 예시) spring.datasource.username=root
spring.datasource.username=

# DB 사용자이름에 대한 암호 설정
# 예시) spring.datasource.password=root
spring.datasource.password=

# true 설정 시, JPA 쿼리문 확인 가능
spring.jpa.show-sql=true

# set jpa dialect
spring.jpa.database=mysql

# DDL(create, alter, drop) 정의 시, DB의 고유 기능을 사용할 수 있음.
spring.jpa.hibernate.ddl-auto=update

# JPA의 구현체인 Hibernate가 동작하면서, 발생한 SQL의 가독성을 높여줌.
spring.jpa.properties.hibernate.format_sql=true

# LiveReload 활성화
spring.devtools.livereload.enabled=true

# Google login
google.client.id = 
google.client.secret =
google.auth.host = accounts.google.com
google.api.host = oauth2.googleapis.com
google.url.redirect = http://localhost:8080/dokkaebi/api/google/redirect

# Kakao login
kakao.api.key = 
kakao.api.host = kapi.kakao.com
kakao.auth.host = kauth.kakao.com
kakao.url.redirect = http://localhost:8080/dokkaebi/api/kakao/redirect

# front page url
front.scheme = http
front.host = localhost:3000
front.url.home = http://localhost:3000
front.url.login = http://localhost:3000/members/login
front.url.bridge = http://localhost:3000/bridge

# S3 setting
cloud.aws.credentials.accessKey="accessKey"
cloud.aws.credentials.secretKey="secretKey"
cloud.aws.s3.bucket=project-dokkaebi
cloud.aws.region.static=ap-northeast-2
cloud.aws.stack.auto-=false

# MQTT setting
mqtt.url = tcp://localhost:1883
